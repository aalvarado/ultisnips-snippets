# #!/usr/bin/ruby
snippet #!
	#!/usr/bin/ruby

# New Block
endsnippet
snippet =b
	=begin rdoc
		${1}
	=end
endsnippet
snippet y
	:yields: ${1:arguments}
endsnippet
snippet rb
	#!/usr/bin/env ruby -wKU

endsnippet
snippet req
	require "${1}"${2}
endsnippet
snippet #
	# =>
endsnippet
snippet end
	__END__
endsnippet
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
endsnippet
snippet when
	when ${1:condition}
		${2}
endsnippet
snippet def
	def ${1:method_name}
		${2}
	end
endsnippet
snippet deft
	def test_${1:case_name}
		${2}
	end
endsnippet
snippet if
	if ${1:condition}
		${2}
	end
endsnippet
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
endsnippet
snippet elsif
	elsif ${1:condition}
		${2}
endsnippet
snippet unless
	unless ${1:condition}
		${2}
	end
endsnippet
snippet while
	while ${1:condition}
		${2}
	end
endsnippet
snippet until
	until ${1:condition}
		${2}
	end
endsnippet
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
endsnippet
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end


	end
endsnippet
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end


	end
endsnippet
snippet cla ClassName = Struct .. do .. end
	${1:`substitute(Filename(), '^.', '\u&', '')`} = Struct.new(:${2:attr_names}) do
		def ${3:method_name}
			${4}
		end


	end
endsnippet
snippet cla class BlankSlate .. initialize .. end
	class ${1:BlankSlate}
		instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
endsnippet
snippet cla class << self .. end
	class << ${1:self}
		${2}
	end
# class .. < DelegateClass .. initialize .. end
endsnippet
snippet cla-
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < DelegateClass(${2:ParentClass})
		def initialize(${3:args})
			super(${4:del_obj})

			${5}
		end


	end
endsnippet
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
endsnippet
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module_function

		${2}
	end
endsnippet
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
# attr_reader
endsnippet
snippet r
	attr_reader :${1:attr_names}
# attr_writer
endsnippet
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
endsnippet
snippet rw
	attr_accessor :${1:attr_names}
# include Enumerable
endsnippet
snippet Enum
	include Enumerable

	def each(&block)
		${1}
	end
# include Comparable
endsnippet
snippet Comp
	include Comparable

	def <=>(other)
		${1}
	end
# extend Forwardable
endsnippet
snippet Forw-
	extend Forwardable
# def self
endsnippet
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
endsnippet
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
endsnippet
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
endsnippet
snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}
endsnippet
snippet am
	alias_method :${1:new_name}, :${2:old_name}
endsnippet
snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end
# usage_if()
endsnippet
snippet usai
	if ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end
# usage_unless()
endsnippet
snippet usau
	unless ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end
endsnippet
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
endsnippet
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
endsnippet
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
endsnippet
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
endsnippet
snippet Dir Dir.global() { |file| .. }
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
endsnippet
snippet Dir Dir[".."]
	Dir[${1:"glob/**/*.rb"}]${2}
endsnippet
snippet dir
	Filename.dirname(__FILE__)
endsnippet
snippet deli
	delete_if { |${1:e}| ${2} }
endsnippet
snippet fil
	fill(${1:range}) { |${2:i}| ${3} }
# flatten_once()
endsnippet
snippet flao
	inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}
endsnippet
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
# downto(0) { |n| .. }
endsnippet
snippet dow
	downto(${1:0}) { |${2:n}| ${3} }
endsnippet
snippet ste
	step(${1:2}) { |${2:n}| ${3} }
endsnippet
snippet tim
	times { |${1:n}| ${2} }
endsnippet
snippet upt
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
endsnippet
snippet loo
	loop { ${1} }
endsnippet
snippet ea
	each { |${1:e}| ${2} }
endsnippet
snippet eab
	each_byte { |${1:byte}| ${2} }
endsnippet
snippet eac- each_char { |chr| .. }
	each_char { |${1:chr}| ${2} }
endsnippet
snippet eac- each_cons(..) { |group| .. }
	each_cons(${1:2}) { |${2:group}| ${3} }
endsnippet
snippet eai
	each_index { |${1:i}| ${2} }
endsnippet
snippet eak
	each_key { |${1:key}| ${2} }
endsnippet
snippet eal
	each_line { |${1:line}| ${2} }
endsnippet
snippet eap
	each_pair { |${1:name}, ${2:val}| ${3} }
endsnippet
snippet eas-
	each_slice(${1:2}) { |${2:group}| ${3} }
endsnippet
snippet eav
	each_value { |${1:val}| ${2} }
endsnippet
snippet eawi
	each_with_index { |${1:e}, ${2:i}| ${3} }
endsnippet
snippet reve
	reverse_each { |${1:e}| ${2} }
endsnippet
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
endsnippet
snippet map
	map { |${1:e}| ${2} }
endsnippet
snippet mapwi-
	enum_with_index.map { |${1:e}, ${2:i}| ${3} }
endsnippet
snippet sor
	sort { |a, b| ${1} }
endsnippet
snippet sorb
	sort_by { |${1:e}| ${2} }
endsnippet
snippet ran
	sort_by { rand }
endsnippet
snippet all
	all? { |${1:e}| ${2} }
endsnippet
snippet any
	any? { |${1:e}| ${2} }
endsnippet
snippet cl
	classify { |${1:e}| ${2} }
endsnippet
snippet col
	collect { |${1:e}| ${2} }
endsnippet
snippet det
	detect { |${1:e}| ${2} }
endsnippet
snippet fet
	fetch(${1:name}) { |${2:key}| ${3} }
endsnippet
snippet fin
	find { |${1:e}| ${2} }
endsnippet
snippet fina
	find_all { |${1:e}| ${2} }
endsnippet
snippet gre
	grep(${1:/pattern/}) { |${2:match}| ${3} }
endsnippet
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
endsnippet
snippet sca
	scan(${1:/pattern/}) { |${2:match}| ${3} }
endsnippet
snippet max
	max { |a, b|, ${1} }
endsnippet
snippet min
	min { |a, b|, ${1} }
endsnippet
snippet par
	partition { |${1:e}|, ${2} }
endsnippet
snippet rej
	reject { |${1:e}|, ${2} }
endsnippet
snippet sel
	select { |${1:e}|, ${2} }
endsnippet
snippet lam
	lambda { |${1:args}| ${2} }
endsnippet
snippet do
	do |${1:variable}|
		${2}
	end
endsnippet
snippet :
	:${1:key} => ${2:"value"}${3}
endsnippet
snippet ope
	open(${1:"path/or/url/or/pipe"}, "${2:w}") { |${3:io}| ${4} }
# path_from_here()
endsnippet
snippet patfh
	File.join(File.dirname(__FILE__), *%2[${1:rel path here}])${2}
# unix_filter {}
endsnippet
snippet unif
	ARGF.each_line${1} do |${2:line}|
		${3}
	end
# option_parse {}
endsnippet
snippet optp
	require "optparse"

	options = {${1:default => "args"}}

	ARGV.options do |opts|
		opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}
endsnippet
snippet opt
	opts.on( "-${1:o}", "--${2:long-option-name}", ${3:String},
	         "${4:Option description.}") do |${5:opt}|
		${6}
	end
endsnippet
snippet tc
	require "test/unit"

	require "${1:library_file_name}"

	class Test${2:$1} < Test::Unit::TestCase
		def test_${3:case_name}
			${4}
		end
	end
endsnippet
snippet ts
	require "test/unit"

	require "tc_${1:test_case_file}"
	require "tc_${2:test_case_file}"${3}
endsnippet
snippet as
	assert(${1:test}, "${2:Failure message.}")${3}
endsnippet
snippet ase
	assert_equal(${1:expected}, ${2:actual})${3}
endsnippet
snippet asne
	assert_not_equal(${1:unexpected}, ${2:actual})${3}
endsnippet
snippet asid
	assert_in_delta(${1:expected_float}, ${2:actual_float}, ${3:2 ** -20})${4}
endsnippet
snippet asio
	assert_instance_of(${1:ExpectedClass}, ${2:actual_instance})${3}
endsnippet
snippet asko
	assert_kind_of(${1:ExpectedKind}, ${2:actual_instance})${3}
endsnippet
snippet asn
	assert_nil(${1:instance})${2}
endsnippet
snippet asnn
	assert_not_nil(${1:instance})${2}
endsnippet
snippet asm
	assert_match(/${1:expected_pattern}/, ${2:actual_string})${3}
endsnippet
snippet asnm
	assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})${3}
endsnippet
snippet aso
	assert_operator(${1:left}, :${2:operator}, ${3:right})${4}
endsnippet
snippet asr
	assert_raise(${1:Exception}) { ${2} }
endsnippet
snippet asnr
	assert_nothing_raised(${1:Exception}) { ${2} }
endsnippet
snippet asrt
	assert_respond_to(${1:object}, :${2:method})${3}
endsnippet
snippet ass assert_same(..)
	assert_same(${1:expected}, ${2:actual})${3}
endsnippet
snippet ass assert_send(..)
	assert_send([${1:object}, :${2:message}, ${3:args}])${4}
endsnippet
snippet asns
	assert_not_same(${1:unexpected}, ${2:actual})${3}
endsnippet
snippet ast
	assert_throws(:${1:expected}) { ${2} }
endsnippet
snippet asnt
	assert_nothing_thrown { ${1} }
endsnippet
snippet fl
	flunk("${1:Failure message.}")${2}
# Benchmark.bmbm do .. end
endsnippet
snippet bm-
	TESTS = ${1:10_000}
	Benchmark.bmbm do |results|
		${2}
	end
endsnippet
snippet rep
	results.report("${1:name}:") { TESTS.times { ${2} }}
# Marshal.dump(.., file)
endsnippet
snippet Md
	File.open(${1:"path/to/file.dump"}, "wb") { |${2:file}| Marshal.dump(${3:obj}, $2) }${4}
# Mashal.load(obj)
endsnippet
snippet Ml
	File.open(${1:"path/to/file.dump"}, "rb") { |${2:file}| Marshal.load($2) }${3}
# deep_copy(..)
endsnippet
snippet deec
	Marshal.load(Marshal.dump(${1:obj_to_copy}))${2}
endsnippet
snippet Pn-
	PStore.new(${1:"file_name.pstore"})${2}
endsnippet
snippet tra
	transaction(${1:true}) { ${2} }
# xmlread(..)
endsnippet
snippet xml-
	REXML::Document.new(File.read(${1:"path/to/file"}))${2}
# xpath(..) { .. }
endsnippet
snippet xpa
	elements.each(${1:"//Xpath"}) do |${2:node}|
		${3}
	end
# class_from_name()
endsnippet
snippet clafn
	split("::").inject(Object) { |par, const| par.const_get(const) }
# singleton_class()
endsnippet
snippet sinc
	class << self; self end
endsnippet
snippet nam
	namespace :${1:`Filename()`} do
		${2}
	end
endsnippet
snippet tas
	desc "${1:Task description\}"
	task :${2:task_name => [:dependent, :tasks]} do
		${3}
	end
endsnippet
